directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""A user with personal informations and holidays"""
type User {
  id: ID!
  email: String!
  name: String!
  displayName: String
  holidays: [Holiday]!
  sickleaves: [Sickleave]!
}

"""TimeOff encapsulate the essence of a holiday"""
interface TimeOff {
  """incluse starting day"""
  startDate: String!

  """exclusive end day"""
  endDate: String!
  status: TimeOffStatus!
  user: User
}

enum TimeOffStatus {
  """request is under approval"""
  PENDING

  """request has been rejected"""
  REJECTED

  """request has been accepted"""
  ACCEPTED

  """request has been fulfilled in the past: the holidays are done"""
  COMPLETED
}

type Holiday implements TimeOff {
  startDate: String!
  endDate: String!
  status: TimeOffStatus!
  user: User
}

type Sickleave implements TimeOff {
  startDate: String!
  endDate: String!
  status: TimeOffStatus!
  reason: String!
  user: User
}

union HolidayOrSickleave = Holiday | Sickleave

type Query {
  """retrieve the users of the platform"""
  users: [User]!

  """retrieve the users of the platform"""
  user(id: ID!): User
  holidayOrSickleaves(id: ID!): [HolidayOrSickleave]

  """retrieve the timeOffs with a certain status"""
  allTimeOff(status: TimeOffStatus): [HolidayOrSickleave]!
}

input UserInput {
  """A main email for the user"""
  email: String!

  """The name of the user"""
  name: String!

  """The name to be displayed"""
  displayName: String
}

input RequestTimeOffInput {
  """The user making the time off request"""
  userId: ID!
  startDate: String!
  endDate: String!
  reason: String
}

"""
Mutations might involve different changes accross the schema nodes. Hence, it is useful to define a mutation response interface
"""
interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type CreateUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type RequestTimeOffMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type Mutation {
  createUser(user: UserInput): CreateUserMutationResponse
  requestTimeOff(requestTimeOff: RequestTimeOffInput): RequestTimeOffMutationResponse
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
